/**
 * Wrapper around brackets pref system to ensure preferences are stored in in one single object instead of using multiple keys.
 * This is to make it easy for the user who edits their preferences file to easily manage the potentially numerous lines of preferences generated by the persisting code-folding state.
 * @author Patrick Oladimeji
 * @date 3/22/14 20:39:53 PM
 */
/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */
/*global define, brackets*/
define(function (require, exports, module) {
    "use strict";
    var PreferencesManager      = brackets.getModule("preferences/PreferencesManager"),
        prefs            = PreferencesManager.getExtensionPrefs("code-folding"),
        DefaultSettings			= require("DefaultSettings"),
        store = {},
        settings = {},
        foldsKey = "folds";
    /**
        Simplifies the fold ranges into an array of pairs of numbers.
        @param {!{number: {from: {ch, line}, to: {ch, line}} folds the raw fold ranges indexed by line numbers
        @returns {number: Array<Array<number>>} an object whose keys are line numbers and the values are array
        of two 2-element arrays. First array contains [from.line, from.ch] and the second contains [to.line, to.ch]
    */
    function simplify(folds) {
        if (!folds) {
            return folds;
        }
        var res = {}, range;
        Object.keys(folds).forEach(function (line) {
            range = folds[line];
            res[line] = Array.isArray(range) ? range : [[range.from.line, range.from.ch], [range.to.line, range.to.ch]];
        });
        return res;
    }
    /**
        Inflates the fold ranges stored as simplified numeric arrays. The inflation converts the data into
        objects whose keys are line numbers and whose values are objects in the format {from: {line, ch}, to: {line, ch}}.
        @param {number: Array<Array<number>>}  folds the simplified fold ranges
        @returns {number: {from: {line, ch}, to: {line, ch}}}
    */
    function inflate(folds) {
        if (!folds) {
            return folds;
        }
         //transform the folds into objects with from and to properties
        var ranges = {}, obj;
        Object.keys(folds).forEach(function (line) {
            obj = folds[line];
            ranges[line] = {from: {line: obj[0][0], ch: obj[0][1]}, to: {line: obj[1][0], ch: obj[1][1]}};
        });

        return ranges;
    }

    /**
        Gets the line folds saved for the specified path.
        @param {string} path the document path
        @returns {number: {from: {line, ch}, to: {line, ch}}} the line folds for the document at the specified path
    */
    function get(path) {
        store = (prefs.get(foldsKey) || {});
        return inflate(store[path]);
    }

    /**
        Saves the line folds specified
    */
    function set(path, folds) {
        store[path] = simplify(folds);
        prefs.set(foldsKey, store);
    }

    /**
        Get the code folding setting with the specified key from the store
        @param {!string} key The key for the setting to retrieve
        @returns {string} the setting with the specified key
    */
    function getSetting(key) {
        settings = (prefs.get("settings") || DefaultSettings);
        return settings[key];
    }

    /**
        Save the code folding setting with the specified key using the specified value
        @param {!string} key
        @param {!string} value
    */
    function setSetting(key, value) {
        settings[key] = value;
        prefs.set("settings", settings);
    }

    /**
        Gets all the values for code folding settings.
        @returns {object} all settings saved in the preferences.
    */
    function getAllSettings() {
        var res = {};
        Object.keys(DefaultSettings).forEach(function (key) {
            res[key] = getSetting(key);
        });
        return res;
    }

    /**
        Clears all the saved line folds for all documents.
    */
    function clearAllFolds() {
        prefs.set(foldsKey, {});
    }

    module.exports.get = get;

    module.exports.set = set;

    module.exports.getSetting = getSetting;

    module.exports.setSetting = setSetting;

    module.exports.getAllSettings = getAllSettings;

    module.exports.clearAllFolds = clearAllFolds;

});
